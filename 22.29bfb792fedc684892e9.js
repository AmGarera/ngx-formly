(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{"10K4":function(s,n){s.exports='\n<div style="margin-bottom: 20px;">\n  <button *ngFor="let example of examples"\n  (click)="loadExample(example)"\n  class="btn" [class.btn-primary]="type === example">\n    {{ example }}\n  </button>\n</div>\n\n<form [formGroup]="form" (ngSubmit)="submit()" *ngIf="fields">\n  <formly-form [model]="model" [fields]="fields" [options]="options" [form]="form"></formly-form>\n  <button type="submit" class="btn btn-primary submit-button" [disabled]="!form.valid">Submit</button>\n</form>\n'},"2d2v":function(s,n){s.exports='{\n    "schema": {\n        "title": "Schema dependencies",\n        "description": "These samples are best viewed without live validation.",\n        "type": "object",\n        "properties": {\n            "simple": {\n                "src": "https://spacetelescope.github.io/understanding-json-schema/reference/object.html#dependencies",\n                "title": "Simple",\n                "type": "object",\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "title": "Name"\n                    },\n                    "credit_card": {\n                        "type": "number",\n                        "title": "Credit card"\n                    }\n                },\n                "required": [\n                    "name"\n                ],\n                "dependencies": {\n                    "credit_card": {\n                        "properties": {\n                            "billing_address": {\n                                "type": "string",\n                                "title": "Billing address"\n                            }\n                        },\n                        "required": [\n                            "billing_address"\n                        ]\n                    }\n                }\n            }\n        }\n    },\n    "model": {\n        "simple": {\n            "name": "Randy"\n        }\n    }\n}'},"5mrV":function(s,n){s.exports='{\n    "schema": {\n        "title": "A registration form",\n        "description": "A simple form example.",\n        "type": "object",\n        "required": [\n            "firstName",\n            "lastName"\n        ],\n        "properties": {\n            "firstName": {\n                "type": "string",\n                "title": "First name",\n                "default": "Chuck"\n            },\n            "lastName": {\n                "type": "string",\n                "title": "Last name"\n            },\n            "age": {\n                "type": "integer",\n                "title": "Age"\n            },\n            "bio": {\n                "type": "string",\n                "title": "Bio"\n            },\n            "password": {\n                "type": "string",\n                "title": "Password",\n                "minLength": 3\n            },\n            "telephone": {\n                "type": "string",\n                "title": "Telephone",\n                "minLength": 10\n            }\n        }\n    },\n    "model": {\n        "lastName": "Norris",\n        "age": 75,\n        "bio": "Roundhouse kicking asses since 1940",\n        "password": "noneed"\n    }\n}'},A1RU:function(s,n){s.exports='<span class="hljs-keyword">import</span> { NgModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { CommonModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/common\'</span>;\n<span class="hljs-keyword">import</span> { ReactiveFormsModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { FormlyModule, FormlyFieldConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n<span class="hljs-keyword">import</span> { FormlyBootstrapModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/bootstrap\'</span>;\n<span class="hljs-keyword">import</span> { HttpClientModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/common/http\'</span>;\n<span class="hljs-keyword">import</span> { MatMenuModule } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/material/menu\'</span>;\n<span class="hljs-keyword">import</span> { AppComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./app.component\'</span>;\n<span class="hljs-keyword">import</span> { ArrayTypeComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./array.type\'</span>;\n<span class="hljs-keyword">import</span> { ObjectTypeComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./object.type\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minlengthValidationMessage</span>(<span class="hljs-params">err, field: FormlyFieldConfig</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`Should have atleast <span class="hljs-subst">${field.templateOptions.minLength}</span> characters`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxlengthValidationMessage</span>(<span class="hljs-params">err, field: FormlyFieldConfig</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be less than <span class="hljs-subst">${field.templateOptions.maxLength}</span> characters`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">minValidationMessage</span>(<span class="hljs-params">err, field: FormlyFieldConfig</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be more than <span class="hljs-subst">${field.templateOptions.min}</span>`</span>;\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxValidationMessage</span>(<span class="hljs-params">err, field: FormlyFieldConfig</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-string">`This value should be less than <span class="hljs-subst">${field.templateOptions.max}</span>`</span>;\n}\n\n<span class="hljs-meta">@NgModule</span>({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    HttpClientModule,\n    MatMenuModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: <span class="hljs-string">\'required\'</span>, message: <span class="hljs-string">\'This field is required\'</span> },\n        { name: <span class="hljs-string">\'minlength\'</span>, message: minlengthValidationMessage },\n        { name: <span class="hljs-string">\'maxlength\'</span>, message: maxlengthValidationMessage },\n        { name: <span class="hljs-string">\'min\'</span>, message: minValidationMessage },\n        { name: <span class="hljs-string">\'max\'</span>, message: maxValidationMessage },\n      ],\n      types: [\n        { name: <span class="hljs-string">\'string\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span> },\n        {\n          name: <span class="hljs-string">\'number\'</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span>,\n          defaultOptions: {\n            templateOptions: {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n            },\n          },\n        },\n        {\n          name: <span class="hljs-string">\'integer\'</span>,\n          <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'input\'</span>,\n          defaultOptions: {\n            templateOptions: {\n              <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n            },\n          },\n        },\n        { name: <span class="hljs-string">\'boolean\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'checkbox\'</span> },\n        { name: <span class="hljs-string">\'enum\'</span>, <span class="hljs-keyword">extends</span>: <span class="hljs-string">\'select\'</span> },\n        { name: <span class="hljs-string">\'array\'</span>, component: ArrayTypeComponent },\n        { name: <span class="hljs-string">\'object\'</span>, component: ObjectTypeComponent },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n    ObjectTypeComponent,\n  ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppModule { }\n'},Bbu8:function(s,n){s.exports='{\n    <span class="hljs-string">"schema"</span>: {\n        <span class="hljs-string">"title"</span>: <span class="hljs-string">"A registration form"</span>,\n        <span class="hljs-string">"description"</span>: <span class="hljs-string">"A simple form example."</span>,\n        <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n        <span class="hljs-string">"required"</span>: [\n            <span class="hljs-string">"firstName"</span>,\n            <span class="hljs-string">"lastName"</span>\n        ],\n        <span class="hljs-string">"properties"</span>: {\n            <span class="hljs-string">"firstName"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"First name"</span>,\n                <span class="hljs-string">"default"</span>: <span class="hljs-string">"Chuck"</span>\n            },\n            <span class="hljs-string">"lastName"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Last name"</span>\n            },\n            <span class="hljs-string">"age"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"integer"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Age"</span>\n            },\n            <span class="hljs-string">"bio"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Bio"</span>\n            },\n            <span class="hljs-string">"password"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Password"</span>,\n                <span class="hljs-string">"minLength"</span>: <span class="hljs-number">3</span>\n            },\n            <span class="hljs-string">"telephone"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Telephone"</span>,\n                <span class="hljs-string">"minLength"</span>: <span class="hljs-number">10</span>\n            }\n        }\n    },\n    <span class="hljs-string">"model"</span>: {\n        <span class="hljs-string">"lastName"</span>: <span class="hljs-string">"Norris"</span>,\n        <span class="hljs-string">"age"</span>: <span class="hljs-number">75</span>,\n        <span class="hljs-string">"bio"</span>: <span class="hljs-string">"Roundhouse kicking asses since 1940"</span>,\n        <span class="hljs-string">"password"</span>: <span class="hljs-string">"noneed"</span>\n    }\n}'},DVcM:function(s,n){s.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FieldType } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-object-type\'</span>,\n  template: <span class="hljs-string">`\n    &lt;legend *ngIf="to.label"&gt;{{ to.label }}&lt;/legend&gt;\n    &lt;p *ngIf="to.description"&gt;{{ to.description }}&lt;/p&gt;\n    &lt;formly-field *ngFor="let f of field.fieldGroup" [field]="f"&gt;&lt;/formly-field&gt;\n  `</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ObjectTypeComponent <span class="hljs-keyword">extends</span> FieldType {\n    defaultOptions = {\n        defaultValue: {},\n    };\n}\n'},HBru:function(s,n){s.exports='import { Component } from \'@angular/core\';\nimport { FieldType } from \'@ngx-formly/core\';\n\n@Component({\n  selector: \'formly-object-type\',\n  template: `\n    <legend *ngIf="to.label">{{ to.label }}</legend>\n    <p *ngIf="to.description">{{ to.description }}</p>\n    <formly-field *ngFor="let f of field.fieldGroup" [field]="f"></formly-field>\n  `,\n})\nexport class ObjectTypeComponent extends FieldType {\n    defaultOptions = {\n        defaultValue: {},\n    };\n}\n'},HQQD:function(s,n){s.exports='{\n    "schema": {\n        "definitions": {\n            "address": {\n                "type": "object",\n                "properties": {\n                    "street_address": {\n                        "type": "string",\n                        "title": "Street address"\n                    },\n                    "city": {\n                        "type": "string",\n                        "title": "City"\n                    },\n                    "state": {\n                        "type": "string",\n                        "title": "State"\n                    }\n                },\n                "required": [\n                    "street_address",\n                    "city",\n                    "state"\n                ]\n            },\n            "node": {\n                "type": "object",\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "title": "Name"\n                    },\n                    "children": {\n                        "type": "array",\n                        "items": {\n                            "$ref": "#/definitions/node"\n                        }\n                    }\n                }\n            }\n        },\n        "type": "object",\n        "properties": {\n            "billing_address": {\n                "title": "Billing address",\n                "$ref": "#/definitions/address"\n            },\n            "shipping_address": {\n                "title": "Shipping address",\n                "$ref": "#/definitions/address"\n            },\n            "tree": {\n                "title": "Recursive references",\n                "$ref": "#/definitions/node"\n            }\n        }\n    },\n    "model": {\n        "billing_address": {\n            "street_address": "21, Jump Street",\n            "city": "Babel",\n            "state": "Neverland"\n        },\n        "shipping_address": {\n            "street_address": "221B, Baker Street",\n            "city": "London",\n            "state": "N/A"\n        },\n        "tree": {\n            "name": "root",\n            "children": [\n                {\n                    "name": "leaf"\n                }\n            ]\n        }\n    }\n}'},VoGc:function(s,n){s.exports='{\n    <span class="hljs-string">"schema"</span>: {\n        <span class="hljs-string">"title"</span>: <span class="hljs-string">"A list of tasks"</span>,\n        <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n        <span class="hljs-string">"required"</span>: [\n            <span class="hljs-string">"title"</span>\n        ],\n        <span class="hljs-string">"properties"</span>: {\n            <span class="hljs-string">"title"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Task list title"</span>\n            },\n            <span class="hljs-string">"tasks"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Tasks"</span>,\n                <span class="hljs-string">"items"</span>: {\n                    <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n                    <span class="hljs-string">"required"</span>: [\n                        <span class="hljs-string">"title"</span>\n                    ],\n                    <span class="hljs-string">"properties"</span>: {\n                        <span class="hljs-string">"title"</span>: {\n                            <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                            <span class="hljs-string">"title"</span>: <span class="hljs-string">"Title"</span>,\n                            <span class="hljs-string">"description"</span>: <span class="hljs-string">"A sample title"</span>\n                        },\n                        <span class="hljs-string">"details"</span>: {\n                            <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                            <span class="hljs-string">"title"</span>: <span class="hljs-string">"Task details"</span>,\n                            <span class="hljs-string">"description"</span>: <span class="hljs-string">"Enter the task details"</span>\n                        },\n                        <span class="hljs-string">"done"</span>: {\n                            <span class="hljs-string">"type"</span>: <span class="hljs-string">"boolean"</span>,\n                            <span class="hljs-string">"title"</span>: <span class="hljs-string">"Done?"</span>,\n                            <span class="hljs-string">"default"</span>: <span class="hljs-literal">false</span>\n                        }\n                    }\n                }\n            }\n        }\n    },\n    <span class="hljs-string">"model"</span>: {\n        <span class="hljs-string">"title"</span>: <span class="hljs-string">"My current tasks"</span>,\n        <span class="hljs-string">"tasks"</span>: [\n            {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"My first task"</span>,\n                <span class="hljs-string">"details"</span>: <span class="hljs-string">"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."</span>,\n                <span class="hljs-string">"done"</span>: <span class="hljs-literal">true</span>\n            },\n            {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"My second task"</span>,\n                <span class="hljs-string">"details"</span>: <span class="hljs-string">"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur"</span>,\n                <span class="hljs-string">"done"</span>: <span class="hljs-literal">false</span>\n            }\n        ]\n    }\n}'},apJI:function(s,n){s.exports='{\n    <span class="hljs-string">"schema"</span>: {\n        <span class="hljs-string">"definitions"</span>: {\n            <span class="hljs-string">"Thing"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n                <span class="hljs-string">"properties"</span>: {\n                    <span class="hljs-string">"name"</span>: {\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                        <span class="hljs-string">"default"</span>: <span class="hljs-string">"Default name"</span>\n                    }\n                }\n            }\n        },\n        <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n        <span class="hljs-string">"properties"</span>: {\n            <span class="hljs-string">"listOfStrings"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"A list of strings"</span>,\n                <span class="hljs-string">"items"</span>: {\n                    <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                    <span class="hljs-string">"default"</span>: <span class="hljs-string">"bazinga"</span>\n                }\n            },\n            <span class="hljs-string">"multipleChoicesList"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"A multiple choices list"</span>,\n                <span class="hljs-string">"items"</span>: {\n                    <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                    <span class="hljs-string">"enum"</span>: [\n                        <span class="hljs-string">"foo"</span>,\n                        <span class="hljs-string">"bar"</span>,\n                        <span class="hljs-string">"fuzz"</span>,\n                        <span class="hljs-string">"qux"</span>\n                    ]\n                },\n                <span class="hljs-string">"uniqueItems"</span>: <span class="hljs-literal">true</span>\n            },\n            <span class="hljs-string">"fixedItemsList"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"A list of fixed items"</span>,\n                <span class="hljs-string">"items"</span>: [\n                    {\n                        <span class="hljs-string">"title"</span>: <span class="hljs-string">"A string value"</span>,\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                        <span class="hljs-string">"default"</span>: <span class="hljs-string">"lorem ipsum"</span>\n                    },\n                    {\n                        <span class="hljs-string">"title"</span>: <span class="hljs-string">"a boolean value"</span>,\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"boolean"</span>\n                    }\n                ],\n                <span class="hljs-string">"additionalItems"</span>: {\n                    <span class="hljs-string">"title"</span>: <span class="hljs-string">"Additional item"</span>,\n                    <span class="hljs-string">"type"</span>: <span class="hljs-string">"number"</span>\n                }\n            },\n            <span class="hljs-string">"minItemsList"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"A list with a minimal number of items"</span>,\n                <span class="hljs-string">"minItems"</span>: <span class="hljs-number">3</span>,\n                <span class="hljs-string">"items"</span>: {\n                    <span class="hljs-string">"$ref"</span>: <span class="hljs-string">"#/definitions/Thing"</span>\n                }\n            },\n            <span class="hljs-string">"defaultsAndMinItems"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"List and item level defaults"</span>,\n                <span class="hljs-string">"minItems"</span>: <span class="hljs-number">5</span>,\n                <span class="hljs-string">"default"</span>: [\n                    <span class="hljs-string">"carp"</span>,\n                    <span class="hljs-string">"trout"</span>,\n                    <span class="hljs-string">"bream"</span>\n                ],\n                <span class="hljs-string">"items"</span>: {\n                    <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                    <span class="hljs-string">"default"</span>: <span class="hljs-string">"unidentified"</span>\n                }\n            },\n            <span class="hljs-string">"nestedList"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Nested list"</span>,\n                <span class="hljs-string">"items"</span>: {\n                    <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                    <span class="hljs-string">"title"</span>: <span class="hljs-string">"Inner list"</span>,\n                    <span class="hljs-string">"items"</span>: {\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                        <span class="hljs-string">"default"</span>: <span class="hljs-string">"lorem ipsum"</span>\n                    }\n                }\n            },\n            <span class="hljs-string">"unorderable"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Unorderable items"</span>,\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"items"</span>: {\n                    <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                    <span class="hljs-string">"default"</span>: <span class="hljs-string">"lorem ipsum"</span>\n                }\n            },\n            <span class="hljs-string">"unremovable"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Unremovable items"</span>,\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"items"</span>: {\n                    <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                    <span class="hljs-string">"default"</span>: <span class="hljs-string">"lorem ipsum"</span>\n                }\n            },\n            <span class="hljs-string">"noToolbar"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"No add, remove and order buttons"</span>,\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"items"</span>: {\n                    <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                    <span class="hljs-string">"default"</span>: <span class="hljs-string">"lorem ipsum"</span>\n                }\n            },\n            <span class="hljs-string">"fixedNoToolbar"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Fixed array without buttons"</span>,\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                <span class="hljs-string">"items"</span>: [\n                    {\n                        <span class="hljs-string">"title"</span>: <span class="hljs-string">"A number"</span>,\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"number"</span>,\n                        <span class="hljs-string">"default"</span>: <span class="hljs-number">42</span>\n                    },\n                    {\n                        <span class="hljs-string">"title"</span>: <span class="hljs-string">"A boolean"</span>,\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"boolean"</span>,\n                        <span class="hljs-string">"default"</span>: <span class="hljs-literal">false</span>\n                    }\n                ],\n                <span class="hljs-string">"additionalItems"</span>: {\n                    <span class="hljs-string">"title"</span>: <span class="hljs-string">"A string"</span>,\n                    <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                    <span class="hljs-string">"default"</span>: <span class="hljs-string">"lorem ipsum"</span>\n                }\n            }\n        }\n    },\n    <span class="hljs-string">"model"</span>: {\n        <span class="hljs-string">"listOfStrings"</span>: [\n            <span class="hljs-string">"foo"</span>,\n            <span class="hljs-string">"bar"</span>\n        ],\n        <span class="hljs-string">"multipleChoicesList"</span>: [\n            <span class="hljs-string">"foo"</span>,\n            <span class="hljs-string">"bar"</span>\n        ],\n        <span class="hljs-string">"fixedItemsList"</span>: [\n            <span class="hljs-string">"Some text"</span>,\n            <span class="hljs-literal">true</span>,\n            <span class="hljs-number">123</span>\n        ],\n        <span class="hljs-string">"nestedList"</span>: [\n            [\n                <span class="hljs-string">"lorem"</span>,\n                <span class="hljs-string">"ipsum"</span>\n            ],\n            [\n                <span class="hljs-string">"dolor"</span>\n            ]\n        ],\n        <span class="hljs-string">"unorderable"</span>: [\n            <span class="hljs-string">"one"</span>,\n            <span class="hljs-string">"two"</span>\n        ],\n        <span class="hljs-string">"unremovable"</span>: [\n            <span class="hljs-string">"one"</span>,\n            <span class="hljs-string">"two"</span>\n        ],\n        <span class="hljs-string">"noToolbar"</span>: [\n            <span class="hljs-string">"one"</span>,\n            <span class="hljs-string">"two"</span>\n        ],\n        <span class="hljs-string">"fixedNoToolbar"</span>: [\n            <span class="hljs-number">42</span>,\n            <span class="hljs-literal">true</span>,\n            <span class="hljs-string">"additional item one"</span>,\n            <span class="hljs-string">"additional item two"</span>\n        ]\n    }\n}'},"cig/":function(s,n){s.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FieldArrayType } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-array-type\'</span>,\n  template: <span class="hljs-string">`\n    &lt;legend *ngIf="to.label"&gt;{{ to.label }}&lt;/legend&gt;\n    &lt;p *ngIf="to.description"&gt;{{ to.description }}&lt;/p&gt;\n    &lt;div *ngFor="let field of field.fieldGroup;let i = index;" class="row"&gt;\n      &lt;formly-field class="col-sm-10" [field]="field"&gt;&lt;/formly-field&gt;\n      &lt;div class="col-sm-2"&gt;\n        &lt;button class="btn btn-danger" type="button" (click)="remove(i)"&gt;Remove&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class="row"&gt;\n      &lt;div class="col-sm-2 offset-sm-10"&gt;\n        &lt;button class="btn btn-primary" type="button" (click)="add()"&gt;Add&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;div&gt;\n  `</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ArrayTypeComponent <span class="hljs-keyword">extends</span> FieldArrayType {}\n'},dagV:function(s,n){s.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FormGroup } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { FormlyFormOptions, FormlyFieldConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core\'</span>;\n<span class="hljs-keyword">import</span> { FormlyJsonschema } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@ngx-formly/core/json-schema\'</span>;\n<span class="hljs-keyword">import</span> { HttpClient } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/common/http\'</span>;\n<span class="hljs-keyword">import</span> { tap } <span class="hljs-keyword">from</span> <span class="hljs-string">\'rxjs/operators\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'formly-app-example\'</span>,\n  templateUrl: <span class="hljs-string">\'./app.component.html\'</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> AppComponent {\n  form: FormGroup;\n  model: <span class="hljs-built_in">any</span>;\n  options: FormlyFormOptions;\n  fields: FormlyFieldConfig[];\n\n  <span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>;\n  examples = [\n    <span class="hljs-string">\'simple\'</span>,\n    <span class="hljs-string">\'nested\'</span>,\n    <span class="hljs-string">\'arrays\'</span>,\n    <span class="hljs-string">\'numbers\'</span>,\n    <span class="hljs-string">\'references\'</span>,\n    <span class="hljs-string">\'schema_dependencies\'</span>,\n  ];\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params">\n    <span class="hljs-keyword">private</span> formlyJsonschema: FormlyJsonschema,\n    <span class="hljs-keyword">private</span> http: HttpClient,\n  </span>) {\n    <span class="hljs-keyword">this</span>.loadExample(<span class="hljs-keyword">this</span>.examples[<span class="hljs-number">0</span>]);\n  }\n\n  loadExample(<span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span>) {\n    <span class="hljs-keyword">this</span>.http.get&lt;<span class="hljs-built_in">any</span>&gt;(<span class="hljs-string">`assets/json-schema/<span class="hljs-subst">${type}</span>.json`</span>).pipe(\n      tap(<span class="hljs-function">(<span class="hljs-params">{ schema, model }</span>) =&gt;</span> {\n        <span class="hljs-keyword">this</span>.type = <span class="hljs-keyword">type</span>;\n        <span class="hljs-keyword">this</span>.form = <span class="hljs-keyword">new</span> FormGroup({});\n        <span class="hljs-keyword">this</span>.options = {};\n        <span class="hljs-keyword">this</span>.fields = [<span class="hljs-keyword">this</span>.formlyJsonschema.toFieldConfig(schema)];\n        <span class="hljs-keyword">this</span>.model = model;\n      }),\n    ).subscribe();\n  }\n\n  submit() {\n    alert(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-keyword">this</span>.model));\n  }\n}\n'},gRYL:function(s,n){s.exports='import { Component } from \'@angular/core\';\nimport { FieldArrayType } from \'@ngx-formly/core\';\n\n@Component({\n  selector: \'formly-array-type\',\n  template: `\n    <legend *ngIf="to.label">{{ to.label }}</legend>\n    <p *ngIf="to.description">{{ to.description }}</p>\n    <div *ngFor="let field of field.fieldGroup;let i = index;" class="row">\n      <formly-field class="col-sm-10" [field]="field"></formly-field>\n      <div class="col-sm-2">\n        <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>\n      </div>\n    </div>\n    <div class="row">\n      <div class="col-sm-2 offset-sm-10">\n        <button class="btn btn-primary" type="button" (click)="add()">Add</button>\n      </div>\n    <div>\n  `,\n})\nexport class ArrayTypeComponent extends FieldArrayType {}\n'},"gh/q":function(s,n,a){"use strict";a.r(n);var l=a("CcnG"),t=a("gIcY"),e=a("HkYz"),p=function(){return(p=Object.assign||function(s){for(var n,a=1,l=arguments.length;a<l;a++)for(var t in n=arguments[a])Object.prototype.hasOwnProperty.call(n,t)&&(s[t]=n[t]);return s}).apply(this,arguments)};function r(s){return""===s||null==s}var i=function(){function s(){}return s.prototype.toFieldConfig=function(s,n){return this._toFieldConfig(s,p({schema:s},n||{}))},s.prototype._toFieldConfig=function(s,n){var a=this;s.$ref&&(s=this.resolveDefinition(s,n));var l={type:this.guessType(s),defaultValue:s.default,templateOptions:{label:s.title,readonly:s.readOnly,description:s.description}};switch(l.type){case"number":case"integer":l.parsers=[function(s){return r(s)?null:Number(s)}],s.hasOwnProperty("minimum")&&(l.templateOptions.min=s.minimum),s.hasOwnProperty("maximum")&&(l.templateOptions.max=s.maximum),s.hasOwnProperty("multipleOf")&&(l.templateOptions.step=s.multipleOf);break;case"string":["minLength","maxLength","pattern"].forEach(function(n){s.hasOwnProperty(n)&&(l.templateOptions[n]=s[n])});break;case"object":l.fieldGroup=[];var t=this.resolveDependencies(s),i=t[0],o=t[1];Object.keys(s.properties||{}).forEach(function(t){var e=a._toFieldConfig(s.properties[t],n);l.fieldGroup.push(e),e.key=t,Array.isArray(s.required)&&-1!==s.required.indexOf(t)&&(e.templateOptions.required=!0),!e.templateOptions.required&&i[t]&&(e.expressionProperties={"templateOptions.required":function(s){return s&&i[t].some(function(n){return!r(s[n])})}}),o[t]&&l.fieldGroup.push(p({},a._toFieldConfig(o[t],n),{hideExpression:function(s){return!s||r(s[t])}}))});break;case"array":l.fieldGroup=[],Object.defineProperty(l,"fieldArray",{get:function(){if(!Array.isArray(s.items))return a._toFieldConfig(s.items,n);var t=s.items[l.fieldGroup.length]?s.items[l.fieldGroup.length]:s.additionalItems;return t?a._toFieldConfig(t,n):null},enumerable:!0,configurable:!0})}return s.enum&&(l.type="enum",l.templateOptions.options=s.enum.map(function(s){return{value:s,label:s}})),s.widget&&s.widget.formlyConfig&&(l=Object(e.f)(s.widget.formlyConfig,l)),n.map?n.map(l,s):l},s.prototype.resolveDefinition=function(s,n){var a=s.$ref.split("#/"),l=a[1];if(a[0])throw Error("Remote schemas for "+s.$ref+" not supported yet.");var t=l?l.split("/").reduce(function(s,n){return s&&s.hasOwnProperty(n)?s[n]:null},n.schema):null;if(!t)throw Error("Cannot find a definition for "+s.$ref+".");return t.$ref?this.resolveDefinition(t,n):p({},t,["title","description","default"].reduce(function(n,a){return s.hasOwnProperty(a)&&(n[a]=s[a]),n},{}))},s.prototype.resolveDependencies=function(s){var n={},a={};return Object.keys(s.dependencies||{}).forEach(function(l){var t=s.dependencies[l];Array.isArray(t)?t.forEach(function(s){n[s]?n[s].push(l):n[s]=[l]}):a[l]=t}),[n,a]},s.prototype.guessType=function(s){var n=s.type;return!n&&s.properties?"object":n},s.ngInjectableDef=l.defineInjectable({factory:function(){return new s},token:s,providedIn:"root"}),s}(),o=a("xMyE"),c=function(){function s(s,n){this.formlyJsonschema=s,this.http=n,this.examples=["simple","nested","arrays","numbers","references","schema_dependencies"],this.loadExample(this.examples[0])}return s.prototype.loadExample=function(s){var n=this;this.http.get("assets/json-schema/"+s+".json").pipe(Object(o.a)(function(a){var l=a.schema,e=a.model;n.type=s,n.form=new t.FormGroup({}),n.options={},n.fields=[n.formlyJsonschema.toFieldConfig(l)],n.model=e})).subscribe()},s.prototype.submit=function(){alert(JSON.stringify(this.model))},s}(),m={examples:[{title:"Json Schema",component:c,debug:!1,files:[{file:"app.component.html",content:a("xsVu"),filecontent:a("10K4")},{file:"app.component.ts",content:a("dagV"),filecontent:a("xueC")},{file:"app.module.ts",content:a("A1RU"),filecontent:a("iXnB")},{file:"array.type.ts",content:a("cig/"),filecontent:a("gRYL")},{file:"object.type.ts",content:a("DVcM"),filecontent:a("HBru")},{file:"assets/json-schema/simple.json",content:a("Bbu8"),filecontent:a("5mrV")},{file:"assets/json-schema/nested.json",content:a("VoGc"),filecontent:a("q5jT")},{file:"assets/json-schema/arrays.json",content:a("apJI"),filecontent:a("h18L")},{file:"assets/json-schema/numbers.json",content:a("jO+d"),filecontent:a("lVTO")},{file:"assets/json-schema/references.json",content:a("jlpz"),filecontent:a("HQQD")},{file:"assets/json-schema/schema_dependencies.json",content:a("vy+M"),filecontent:a("2d2v")}]}]},g=function(){return function(){}}(),d=a("NcP4"),h=a("AcC/"),u=a("htty"),j=a("LgGJ"),f=a("MT1c"),y=a("1Q/V"),b=a("9+aI"),v=a("haId"),x=a("LJsP"),w=a("yR2A"),k=a("UFMs"),C=a("cI/F"),F=a("fVcV"),O=a("DAbo"),M=a("Ip0R"),T=a("mrSG"),I=function(s){function n(){return null!==s&&s.apply(this,arguments)||this}return Object(T.__extends)(n,s),n}(e.a),N=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function A(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,1,"legend",[],null,null,null,null,null)),(s()(),l["\u0275ted"](1,null,["",""]))],null,function(s,n){s(n,1,0,n.component.to.label)})}function _(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,1,"p",[],null,null,null,null,null)),(s()(),l["\u0275ted"](1,null,["",""]))],null,function(s,n){s(n,1,0,n.component.to.description)})}function R(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(s()(),l["\u0275eld"](1,0,null,null,1,"formly-field",[["class","col-sm-10"]],[[4,"display",null],[8,"className",0]],null,null,C.b,C.a)),l["\u0275did"](2,16760832,null,0,F.a,[O.b,l.ComponentFactoryResolver,l.Injector,[8,null]],{field:[0,"field"],className:[1,"className"]},null),(s()(),l["\u0275eld"](3,0,null,null,2,"div",[["class","col-sm-2"]],null,null,null,null,null)),(s()(),l["\u0275eld"](4,0,null,null,1,"button",[["class","btn btn-danger"],["type","button"]],null,[[null,"click"]],function(s,n,a){var l=!0;return"click"===n&&(l=!1!==s.component.remove(s.context.index)&&l),l},null,null)),(s()(),l["\u0275ted"](-1,null,["Remove"]))],function(s,n){s(n,2,0,n.context.$implicit,"col-sm-10")},function(s,n){s(n,1,0,l["\u0275nov"](n,2).field.hide?"none":"",l["\u0275nov"](n,2).field.className?l["\u0275nov"](n,2).field.className:l["\u0275nov"](n,2).className)})}function L(s){return l["\u0275vid"](0,[(s()(),l["\u0275and"](16777216,null,null,1,null,A)),l["\u0275did"](1,16384,null,0,M.NgIf,[l.ViewContainerRef,l.TemplateRef],{ngIf:[0,"ngIf"]},null),(s()(),l["\u0275and"](16777216,null,null,1,null,_)),l["\u0275did"](3,16384,null,0,M.NgIf,[l.ViewContainerRef,l.TemplateRef],{ngIf:[0,"ngIf"]},null),(s()(),l["\u0275and"](16777216,null,null,1,null,R)),l["\u0275did"](5,278528,null,0,M.NgForOf,[l.ViewContainerRef,l.TemplateRef,l.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(s()(),l["\u0275eld"](6,0,null,null,4,"div",[["class","row"]],null,null,null,null,null)),(s()(),l["\u0275eld"](7,0,null,null,2,"div",[["class","col-sm-2 offset-sm-10"]],null,null,null,null,null)),(s()(),l["\u0275eld"](8,0,null,null,1,"button",[["class","btn btn-primary"],["type","button"]],null,[[null,"click"]],function(s,n,a){var l=!0;return"click"===n&&(l=!1!==s.component.add()&&l),l},null,null)),(s()(),l["\u0275ted"](-1,null,["Add"])),(s()(),l["\u0275eld"](10,0,null,null,0,"div",[],null,null,null,null,null))],function(s,n){var a=n.component;s(n,1,0,a.to.label),s(n,3,0,a.to.description),s(n,5,0,a.field.fieldGroup)},null)}function S(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,1,"formly-array-type",[],null,null,null,L,N)),l["\u0275did"](1,49152,null,0,I,[[2,O.a]],null,null)],null,null)}var V=l["\u0275ccf"]("formly-array-type",I,S,{field:"field",model:"model",form:"form",options:"options"},{},[]),q=function(s){function n(){var n=null!==s&&s.apply(this,arguments)||this;return n.defaultOptions={defaultValue:{}},n}return Object(T.__extends)(n,s),n}(e.b),E=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function G(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,1,"legend",[],null,null,null,null,null)),(s()(),l["\u0275ted"](1,null,["",""]))],null,function(s,n){s(n,1,0,n.component.to.label)})}function D(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,1,"p",[],null,null,null,null,null)),(s()(),l["\u0275ted"](1,null,["",""]))],null,function(s,n){s(n,1,0,n.component.to.description)})}function $(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,1,"formly-field",[],[[4,"display",null],[8,"className",0]],null,null,C.b,C.a)),l["\u0275did"](1,16760832,null,0,F.a,[O.b,l.ComponentFactoryResolver,l.Injector,[8,null]],{field:[0,"field"]},null)],function(s,n){s(n,1,0,n.context.$implicit)},function(s,n){s(n,0,0,l["\u0275nov"](n,1).field.hide?"none":"",l["\u0275nov"](n,1).field.className?l["\u0275nov"](n,1).field.className:l["\u0275nov"](n,1).className)})}function B(s){return l["\u0275vid"](0,[(s()(),l["\u0275and"](16777216,null,null,1,null,G)),l["\u0275did"](1,16384,null,0,M.NgIf,[l.ViewContainerRef,l.TemplateRef],{ngIf:[0,"ngIf"]},null),(s()(),l["\u0275and"](16777216,null,null,1,null,D)),l["\u0275did"](3,16384,null,0,M.NgIf,[l.ViewContainerRef,l.TemplateRef],{ngIf:[0,"ngIf"]},null),(s()(),l["\u0275and"](16777216,null,null,1,null,$)),l["\u0275did"](5,278528,null,0,M.NgForOf,[l.ViewContainerRef,l.TemplateRef,l.IterableDiffers],{ngForOf:[0,"ngForOf"]},null)],function(s,n){var a=n.component;s(n,1,0,a.to.label),s(n,3,0,a.to.description),s(n,5,0,a.field.fieldGroup)},null)}function J(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,1,"formly-object-type",[],null,null,null,B,E)),l["\u0275did"](1,49152,null,0,q,[],null,null)],null,null)}var P=l["\u0275ccf"]("formly-object-type",q,J,{field:"field",model:"model",form:"form",options:"options"},{},[]),H=a("pMnS"),U=a("4o01"),z=a("Dl9q"),Y=a("UcnZ"),Q=a("9Glx"),X=a("t/Na"),Z=l["\u0275crt"]({encapsulation:2,styles:[],data:{}});function K(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,1,"button",[["class","btn"]],[[2,"btn-primary",null]],[[null,"click"]],function(s,n,a){var l=!0;return"click"===n&&(l=!1!==s.component.loadExample(s.context.$implicit)&&l),l},null,null)),(s()(),l["\u0275ted"](1,null,[" "," "]))],null,function(s,n){s(n,0,0,n.component.type===n.context.$implicit),s(n,1,0,n.context.$implicit)})}function W(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,9,"form",[["novalidate",""]],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngSubmit"],[null,"submit"],[null,"reset"]],function(s,n,a){var t=!0,e=s.component;return"submit"===n&&(t=!1!==l["\u0275nov"](s,2).onSubmit(a)&&t),"reset"===n&&(t=!1!==l["\u0275nov"](s,2).onReset()&&t),"ngSubmit"===n&&(t=!1!==e.submit()&&t),t},null,null)),l["\u0275did"](1,16384,null,0,t["\u0275angular_packages_forms_forms_bh"],[],null,null),l["\u0275did"](2,540672,null,0,t.FormGroupDirective,[[8,null],[8,null]],{form:[0,"form"]},{ngSubmit:"ngSubmit"}),l["\u0275prd"](2048,null,t.ControlContainer,null,[t.FormGroupDirective]),l["\u0275did"](4,16384,null,0,t.NgControlStatusGroup,[[4,t.ControlContainer]],null,null),(s()(),l["\u0275eld"](5,0,null,null,2,"formly-form",[],null,null,null,z.b,z.a)),l["\u0275prd"](512,null,Y.a,Y.a,[O.b,l.ComponentFactoryResolver,l.Injector]),l["\u0275did"](7,966656,null,0,Q.a,[Y.a,O.b,[8,null],[2,t.FormGroupDirective]],{form:[0,"form"],model:[1,"model"],fields:[2,"fields"],options:[3,"options"]},null),(s()(),l["\u0275eld"](8,0,null,null,1,"button",[["class","btn btn-primary submit-button"],["type","submit"]],[[8,"disabled",0]],null,null,null,null)),(s()(),l["\u0275ted"](-1,null,["Submit"]))],function(s,n){var a=n.component;s(n,2,0,a.form),s(n,7,0,a.form,a.model,a.fields,a.options)},function(s,n){var a=n.component;s(n,0,0,l["\u0275nov"](n,4).ngClassUntouched,l["\u0275nov"](n,4).ngClassTouched,l["\u0275nov"](n,4).ngClassPristine,l["\u0275nov"](n,4).ngClassDirty,l["\u0275nov"](n,4).ngClassValid,l["\u0275nov"](n,4).ngClassInvalid,l["\u0275nov"](n,4).ngClassPending),s(n,8,0,!a.form.valid)})}function ss(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,2,"div",[["style","margin-bottom: 20px;"]],null,null,null,null,null)),(s()(),l["\u0275and"](16777216,null,null,1,null,K)),l["\u0275did"](2,278528,null,0,M.NgForOf,[l.ViewContainerRef,l.TemplateRef,l.IterableDiffers],{ngForOf:[0,"ngForOf"]},null),(s()(),l["\u0275and"](16777216,null,null,1,null,W)),l["\u0275did"](4,16384,null,0,M.NgIf,[l.ViewContainerRef,l.TemplateRef],{ngIf:[0,"ngIf"]},null)],function(s,n){var a=n.component;s(n,2,0,a.examples),s(n,4,0,a.fields)},null)}function ns(s){return l["\u0275vid"](0,[(s()(),l["\u0275eld"](0,0,null,null,1,"formly-app-example",[],null,null,null,ss,Z)),l["\u0275did"](1,49152,null,0,c,[i,X.c],null,null)],null,null)}var as=l["\u0275ccf"]("formly-app-example",c,ns,{},{},[]),ls=a("M2Lx"),ts=a("eDkP"),es=a("Fzqc"),ps=a("v9Dh"),rs=a("ZYjt"),is=a("Wf4p"),os=a("mVsa"),cs=a("6LlJ"),ms=a("F6kA"),gs=a("dWZg"),ds=a("lLAP"),hs=a("4c35"),us=a("qAlS"),js=a("La40"),fs=a("SMsm"),ys=a("UodH"),bs=a("5QwG"),vs=a("qkla"),xs=a("iZhS"),ws=a("me7w"),ks=a("N3PW"),Cs=a("l4pn"),Fs=a("Fv2i"),Os=a("wBYW"),Ms=a("IE48"),Ts=a("Q4Tx"),Is=a("XR12");function Ns(s,n){return"Should have atleast "+n.templateOptions.minLength+" characters"}function As(s,n){return"This value should be less than "+n.templateOptions.maxLength+" characters"}function _s(s,n){return"This value should be more than "+n.templateOptions.min}function Rs(s,n){return"This value should be less than "+n.templateOptions.max}var Ls=function(){return function(){}}(),Ss=a("Nsh5"),Vs=a("8mMr"),qs=a("mqvi"),Es=a("lYui"),Gs=a("VGFS"),Ds=a("1ey0"),$s=a("ZYCi"),Bs=a("cIcG");a.d(n,"ConfigModuleNgFactory",function(){return Js});var Js=l["\u0275cmf"](g,[],function(s){return l["\u0275mod"]([l["\u0275mpd"](512,l.ComponentFactoryResolver,l["\u0275CodegenComponentFactoryResolver"],[[8,[d.a,h.a,u.a,j.a,f.a,y.a,b.a,v.a,x.a,w.a,k.a,V,P,H.a,U.a,as]],[3,l.ComponentFactoryResolver],l.NgModuleRef]),l["\u0275mpd"](4608,M.NgLocalization,M.NgLocaleLocalization,[l.LOCALE_ID,[2,M["\u0275angular_packages_common_common_a"]]]),l["\u0275mpd"](4608,ls.c,ls.c,[]),l["\u0275mpd"](4608,ts.c,ts.c,[ts.i,ts.e,l.ComponentFactoryResolver,ts.h,ts.f,l.Injector,l.NgZone,M.DOCUMENT,es.b,[2,M.Location]]),l["\u0275mpd"](5120,ts.j,ts.k,[ts.c]),l["\u0275mpd"](5120,ps.b,ps.c,[ts.c]),l["\u0275mpd"](4608,rs.HAMMER_GESTURE_CONFIG,is.c,[[2,is.g],[2,is.l]]),l["\u0275mpd"](5120,os.b,os.g,[ts.c]),l["\u0275mpd"](4608,cs.a,cs.a,[]),l["\u0275mpd"](4608,ms.a,ms.a,[]),l["\u0275mpd"](4608,t.FormBuilder,t.FormBuilder,[]),l["\u0275mpd"](4608,t["\u0275angular_packages_forms_forms_j"],t["\u0275angular_packages_forms_forms_j"],[]),l["\u0275mpd"](4608,Y.a,Y.a,[O.b,l.ComponentFactoryResolver,l.Injector]),l["\u0275mpd"](4608,X.h,X.n,[M.DOCUMENT,l.PLATFORM_ID,X.l]),l["\u0275mpd"](4608,X.o,X.o,[X.h,X.m]),l["\u0275mpd"](5120,X.a,function(s){return[s]},[X.o]),l["\u0275mpd"](4608,X.k,X.k,[]),l["\u0275mpd"](6144,X.i,null,[X.k]),l["\u0275mpd"](4608,X.g,X.g,[X.i]),l["\u0275mpd"](6144,X.b,null,[X.g]),l["\u0275mpd"](4608,X.f,X.j,[X.b,l.Injector]),l["\u0275mpd"](4608,X.c,X.c,[X.f]),l["\u0275mpd"](1073742336,M.CommonModule,M.CommonModule,[]),l["\u0275mpd"](1073742336,gs.b,gs.b,[]),l["\u0275mpd"](1073742336,ls.d,ls.d,[]),l["\u0275mpd"](1073742336,ds.a,ds.a,[]),l["\u0275mpd"](1073742336,es.a,es.a,[]),l["\u0275mpd"](1073742336,hs.g,hs.g,[]),l["\u0275mpd"](1073742336,us.c,us.c,[]),l["\u0275mpd"](1073742336,ts.g,ts.g,[]),l["\u0275mpd"](1073742336,is.l,is.l,[[2,is.d],[2,rs.HAMMER_LOADER]]),l["\u0275mpd"](1073742336,ps.e,ps.e,[]),l["\u0275mpd"](1073742336,is.v,is.v,[]),l["\u0275mpd"](1073742336,js.j,js.j,[]),l["\u0275mpd"](1073742336,os.e,os.e,[]),l["\u0275mpd"](1073742336,fs.c,fs.c,[]),l["\u0275mpd"](1073742336,ys.c,ys.c,[]),l["\u0275mpd"](1073742336,bs.b,bs.b,[]),l["\u0275mpd"](512,O.b,O.b,[]),l["\u0275mpd"](1024,O.a,function(s){return[{wrappers:[{name:"addons",component:vs.a}],extensions:[{name:"addons",extension:{postPopulate:xs.a}}]},{types:[{name:"input",component:ws.a,wrappers:["form-field"]},{name:"checkbox",component:ks.a,wrappers:["form-field"]},{name:"radio",component:Cs.a,wrappers:["form-field"]},{name:"select",component:Fs.a,wrappers:["form-field"]},{name:"textarea",component:Os.a,wrappers:["form-field"]},{name:"multicheckbox",component:Ms.a,wrappers:["form-field"]}],wrappers:[{name:"form-field",component:Ts.a}]},Is.b(s),{validationMessages:[{name:"required",message:"This field is required"},{name:"minlength",message:Ns},{name:"maxlength",message:As},{name:"min",message:_s},{name:"max",message:Rs}],types:[{name:"string",extends:"input"},{name:"number",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"integer",extends:"input",defaultOptions:{templateOptions:{type:"number"}}},{name:"boolean",extends:"checkbox"},{name:"enum",extends:"select"},{name:"array",component:I},{name:"object",component:q}]}]},[O.b]),l["\u0275mpd"](1073742336,Is.a,Is.a,[O.b,[2,O.a]]),l["\u0275mpd"](1073742336,Ss.h,Ss.h,[]),l["\u0275mpd"](1073742336,Vs.b,Vs.b,[]),l["\u0275mpd"](1073742336,qs.a,qs.a,[]),l["\u0275mpd"](1073742336,t["\u0275angular_packages_forms_forms_bc"],t["\u0275angular_packages_forms_forms_bc"],[]),l["\u0275mpd"](1073742336,t.ReactiveFormsModule,t.ReactiveFormsModule,[]),l["\u0275mpd"](1073742336,Es.a,Es.a,[]),l["\u0275mpd"](1073742336,Gs.a,Gs.a,[]),l["\u0275mpd"](1073742336,Ds.a,Ds.a,[]),l["\u0275mpd"](1073742336,X.e,X.e,[]),l["\u0275mpd"](1073742336,X.d,X.d,[]),l["\u0275mpd"](1073742336,Ls,Ls,[]),l["\u0275mpd"](1073742336,$s.s,$s.s,[[2,$s.y],[2,$s.p]]),l["\u0275mpd"](1073742336,g,g,[]),l["\u0275mpd"](256,X.l,"XSRF-TOKEN",[]),l["\u0275mpd"](256,X.m,"X-XSRF-TOKEN",[]),l["\u0275mpd"](1024,$s.n,function(){return[[{path:"",component:Bs.a,data:m}]]},[])])})},h18L:function(s,n){s.exports='{\n    "schema": {\n        "definitions": {\n            "Thing": {\n                "type": "object",\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "default": "Default name"\n                    }\n                }\n            }\n        },\n        "type": "object",\n        "properties": {\n            "listOfStrings": {\n                "type": "array",\n                "title": "A list of strings",\n                "items": {\n                    "type": "string",\n                    "default": "bazinga"\n                }\n            },\n            "multipleChoicesList": {\n                "type": "array",\n                "title": "A multiple choices list",\n                "items": {\n                    "type": "string",\n                    "enum": [\n                        "foo",\n                        "bar",\n                        "fuzz",\n                        "qux"\n                    ]\n                },\n                "uniqueItems": true\n            },\n            "fixedItemsList": {\n                "type": "array",\n                "title": "A list of fixed items",\n                "items": [\n                    {\n                        "title": "A string value",\n                        "type": "string",\n                        "default": "lorem ipsum"\n                    },\n                    {\n                        "title": "a boolean value",\n                        "type": "boolean"\n                    }\n                ],\n                "additionalItems": {\n                    "title": "Additional item",\n                    "type": "number"\n                }\n            },\n            "minItemsList": {\n                "type": "array",\n                "title": "A list with a minimal number of items",\n                "minItems": 3,\n                "items": {\n                    "$ref": "#/definitions/Thing"\n                }\n            },\n            "defaultsAndMinItems": {\n                "type": "array",\n                "title": "List and item level defaults",\n                "minItems": 5,\n                "default": [\n                    "carp",\n                    "trout",\n                    "bream"\n                ],\n                "items": {\n                    "type": "string",\n                    "default": "unidentified"\n                }\n            },\n            "nestedList": {\n                "type": "array",\n                "title": "Nested list",\n                "items": {\n                    "type": "array",\n                    "title": "Inner list",\n                    "items": {\n                        "type": "string",\n                        "default": "lorem ipsum"\n                    }\n                }\n            },\n            "unorderable": {\n                "title": "Unorderable items",\n                "type": "array",\n                "items": {\n                    "type": "string",\n                    "default": "lorem ipsum"\n                }\n            },\n            "unremovable": {\n                "title": "Unremovable items",\n                "type": "array",\n                "items": {\n                    "type": "string",\n                    "default": "lorem ipsum"\n                }\n            },\n            "noToolbar": {\n                "title": "No add, remove and order buttons",\n                "type": "array",\n                "items": {\n                    "type": "string",\n                    "default": "lorem ipsum"\n                }\n            },\n            "fixedNoToolbar": {\n                "title": "Fixed array without buttons",\n                "type": "array",\n                "items": [\n                    {\n                        "title": "A number",\n                        "type": "number",\n                        "default": 42\n                    },\n                    {\n                        "title": "A boolean",\n                        "type": "boolean",\n                        "default": false\n                    }\n                ],\n                "additionalItems": {\n                    "title": "A string",\n                    "type": "string",\n                    "default": "lorem ipsum"\n                }\n            }\n        }\n    },\n    "model": {\n        "listOfStrings": [\n            "foo",\n            "bar"\n        ],\n        "multipleChoicesList": [\n            "foo",\n            "bar"\n        ],\n        "fixedItemsList": [\n            "Some text",\n            true,\n            123\n        ],\n        "nestedList": [\n            [\n                "lorem",\n                "ipsum"\n            ],\n            [\n                "dolor"\n            ]\n        ],\n        "unorderable": [\n            "one",\n            "two"\n        ],\n        "unremovable": [\n            "one",\n            "two"\n        ],\n        "noToolbar": [\n            "one",\n            "two"\n        ],\n        "fixedNoToolbar": [\n            42,\n            true,\n            "additional item one",\n            "additional item two"\n        ]\n    }\n}'},iXnB:function(s,n){s.exports="import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { AppComponent } from './app.component';\nimport { ArrayTypeComponent } from './array.type';\nimport { ObjectTypeComponent } from './object.type';\n\nexport function minlengthValidationMessage(err, field: FormlyFieldConfig) {\n  return `Should have atleast ${field.templateOptions.minLength} characters`;\n}\n\nexport function maxlengthValidationMessage(err, field: FormlyFieldConfig) {\n  return `This value should be less than ${field.templateOptions.maxLength} characters`;\n}\n\nexport function minValidationMessage(err, field: FormlyFieldConfig) {\n  return `This value should be more than ${field.templateOptions.min}`;\n}\n\nexport function maxValidationMessage(err, field: FormlyFieldConfig) {\n  return `This value should be less than ${field.templateOptions.max}`;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlyBootstrapModule,\n    HttpClientModule,\n    MatMenuModule,\n    FormlyModule.forRoot({\n      validationMessages: [\n        { name: 'required', message: 'This field is required' },\n        { name: 'minlength', message: minlengthValidationMessage },\n        { name: 'maxlength', message: maxlengthValidationMessage },\n        { name: 'min', message: minValidationMessage },\n        { name: 'max', message: maxValidationMessage },\n      ],\n      types: [\n        { name: 'string', extends: 'input' },\n        {\n          name: 'number',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        {\n          name: 'integer',\n          extends: 'input',\n          defaultOptions: {\n            templateOptions: {\n              type: 'number',\n            },\n          },\n        },\n        { name: 'boolean', extends: 'checkbox' },\n        { name: 'enum', extends: 'select' },\n        { name: 'array', component: ArrayTypeComponent },\n        { name: 'object', component: ObjectTypeComponent },\n      ],\n    }),\n  ],\n  declarations: [\n    AppComponent,\n    ArrayTypeComponent,\n    ObjectTypeComponent,\n  ],\n})\nexport class AppModule { }\n"},"jO+d":function(s,n){s.exports='{\n    <span class="hljs-string">"schema"</span>: {\n        <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n        <span class="hljs-string">"title"</span>: <span class="hljs-string">"Number fields &amp; widgets"</span>,\n        <span class="hljs-string">"properties"</span>: {\n            <span class="hljs-string">"number"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Number"</span>,\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"number"</span>\n            },\n            <span class="hljs-string">"integer"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Integer"</span>,\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"integer"</span>\n            },\n            <span class="hljs-string">"numberEnum"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"number"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Number enum"</span>,\n                <span class="hljs-string">"enum"</span>: [\n                    <span class="hljs-number">1</span>,\n                    <span class="hljs-number">2</span>,\n                    <span class="hljs-number">3</span>\n                ]\n            },\n            <span class="hljs-string">"numberEnumRadio"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"number"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Number enum"</span>,\n                <span class="hljs-string">"enum"</span>: [\n                    <span class="hljs-number">1</span>,\n                    <span class="hljs-number">2</span>,\n                    <span class="hljs-number">3</span>\n                ]\n            },\n            <span class="hljs-string">"integerRange"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Integer range"</span>,\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"integer"</span>,\n                <span class="hljs-string">"minimum"</span>: <span class="hljs-number">42</span>,\n                <span class="hljs-string">"maximum"</span>: <span class="hljs-number">100</span>\n            },\n            <span class="hljs-string">"integerRangeSteps"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Integer range (by 10)"</span>,\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"integer"</span>,\n                <span class="hljs-string">"minimum"</span>: <span class="hljs-number">50</span>,\n                <span class="hljs-string">"maximum"</span>: <span class="hljs-number">100</span>,\n                <span class="hljs-string">"multipleOf"</span>: <span class="hljs-number">10</span>\n            }\n        }\n    },\n    <span class="hljs-string">"model"</span>: {\n        <span class="hljs-string">"number"</span>: <span class="hljs-number">3.14</span>,\n        <span class="hljs-string">"integer"</span>: <span class="hljs-number">42</span>,\n        <span class="hljs-string">"numberEnum"</span>: <span class="hljs-number">2</span>,\n        <span class="hljs-string">"integerRange"</span>: <span class="hljs-number">42</span>,\n        <span class="hljs-string">"integerRangeSteps"</span>: <span class="hljs-number">80</span>\n    }\n}'},jlpz:function(s,n){s.exports='{\n    <span class="hljs-string">"schema"</span>: {\n        <span class="hljs-string">"definitions"</span>: {\n            <span class="hljs-string">"address"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n                <span class="hljs-string">"properties"</span>: {\n                    <span class="hljs-string">"street_address"</span>: {\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                        <span class="hljs-string">"title"</span>: <span class="hljs-string">"Street address"</span>\n                    },\n                    <span class="hljs-string">"city"</span>: {\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                        <span class="hljs-string">"title"</span>: <span class="hljs-string">"City"</span>\n                    },\n                    <span class="hljs-string">"state"</span>: {\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                        <span class="hljs-string">"title"</span>: <span class="hljs-string">"State"</span>\n                    }\n                },\n                <span class="hljs-string">"required"</span>: [\n                    <span class="hljs-string">"street_address"</span>,\n                    <span class="hljs-string">"city"</span>,\n                    <span class="hljs-string">"state"</span>\n                ]\n            },\n            <span class="hljs-string">"node"</span>: {\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n                <span class="hljs-string">"properties"</span>: {\n                    <span class="hljs-string">"name"</span>: {\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                        <span class="hljs-string">"title"</span>: <span class="hljs-string">"Name"</span>\n                    },\n                    <span class="hljs-string">"children"</span>: {\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"array"</span>,\n                        <span class="hljs-string">"items"</span>: {\n                            <span class="hljs-string">"$ref"</span>: <span class="hljs-string">"#/definitions/node"</span>\n                        }\n                    }\n                }\n            }\n        },\n        <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n        <span class="hljs-string">"properties"</span>: {\n            <span class="hljs-string">"billing_address"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Billing address"</span>,\n                <span class="hljs-string">"$ref"</span>: <span class="hljs-string">"#/definitions/address"</span>\n            },\n            <span class="hljs-string">"shipping_address"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Shipping address"</span>,\n                <span class="hljs-string">"$ref"</span>: <span class="hljs-string">"#/definitions/address"</span>\n            },\n            <span class="hljs-string">"tree"</span>: {\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Recursive references"</span>,\n                <span class="hljs-string">"$ref"</span>: <span class="hljs-string">"#/definitions/node"</span>\n            }\n        }\n    },\n    <span class="hljs-string">"model"</span>: {\n        <span class="hljs-string">"billing_address"</span>: {\n            <span class="hljs-string">"street_address"</span>: <span class="hljs-string">"21, Jump Street"</span>,\n            <span class="hljs-string">"city"</span>: <span class="hljs-string">"Babel"</span>,\n            <span class="hljs-string">"state"</span>: <span class="hljs-string">"Neverland"</span>\n        },\n        <span class="hljs-string">"shipping_address"</span>: {\n            <span class="hljs-string">"street_address"</span>: <span class="hljs-string">"221B, Baker Street"</span>,\n            <span class="hljs-string">"city"</span>: <span class="hljs-string">"London"</span>,\n            <span class="hljs-string">"state"</span>: <span class="hljs-string">"N/A"</span>\n        },\n        <span class="hljs-string">"tree"</span>: {\n            <span class="hljs-string">"name"</span>: <span class="hljs-string">"root"</span>,\n            <span class="hljs-string">"children"</span>: [\n                {\n                    <span class="hljs-string">"name"</span>: <span class="hljs-string">"leaf"</span>\n                }\n            ]\n        }\n    }\n}'},lVTO:function(s,n){s.exports='{\n    "schema": {\n        "type": "object",\n        "title": "Number fields & widgets",\n        "properties": {\n            "number": {\n                "title": "Number",\n                "type": "number"\n            },\n            "integer": {\n                "title": "Integer",\n                "type": "integer"\n            },\n            "numberEnum": {\n                "type": "number",\n                "title": "Number enum",\n                "enum": [\n                    1,\n                    2,\n                    3\n                ]\n            },\n            "numberEnumRadio": {\n                "type": "number",\n                "title": "Number enum",\n                "enum": [\n                    1,\n                    2,\n                    3\n                ]\n            },\n            "integerRange": {\n                "title": "Integer range",\n                "type": "integer",\n                "minimum": 42,\n                "maximum": 100\n            },\n            "integerRangeSteps": {\n                "title": "Integer range (by 10)",\n                "type": "integer",\n                "minimum": 50,\n                "maximum": 100,\n                "multipleOf": 10\n            }\n        }\n    },\n    "model": {\n        "number": 3.14,\n        "integer": 42,\n        "numberEnum": 2,\n        "integerRange": 42,\n        "integerRangeSteps": 80\n    }\n}'},q5jT:function(s,n){s.exports='{\n    "schema": {\n        "title": "A list of tasks",\n        "type": "object",\n        "required": [\n            "title"\n        ],\n        "properties": {\n            "title": {\n                "type": "string",\n                "title": "Task list title"\n            },\n            "tasks": {\n                "type": "array",\n                "title": "Tasks",\n                "items": {\n                    "type": "object",\n                    "required": [\n                        "title"\n                    ],\n                    "properties": {\n                        "title": {\n                            "type": "string",\n                            "title": "Title",\n                            "description": "A sample title"\n                        },\n                        "details": {\n                            "type": "string",\n                            "title": "Task details",\n                            "description": "Enter the task details"\n                        },\n                        "done": {\n                            "type": "boolean",\n                            "title": "Done?",\n                            "default": false\n                        }\n                    }\n                }\n            }\n        }\n    },\n    "model": {\n        "title": "My current tasks",\n        "tasks": [\n            {\n                "title": "My first task",\n                "details": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",\n                "done": true\n            },\n            {\n                "title": "My second task",\n                "details": "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur",\n                "done": false\n            }\n        ]\n    }\n}'},"vy+M":function(s,n){s.exports='{\n    <span class="hljs-string">"schema"</span>: {\n        <span class="hljs-string">"title"</span>: <span class="hljs-string">"Schema dependencies"</span>,\n        <span class="hljs-string">"description"</span>: <span class="hljs-string">"These samples are best viewed without live validation."</span>,\n        <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n        <span class="hljs-string">"properties"</span>: {\n            <span class="hljs-string">"simple"</span>: {\n                <span class="hljs-string">"src"</span>: <span class="hljs-string">"https://spacetelescope.github.io/understanding-json-schema/reference/object.html#dependencies"</span>,\n                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Simple"</span>,\n                <span class="hljs-string">"type"</span>: <span class="hljs-string">"object"</span>,\n                <span class="hljs-string">"properties"</span>: {\n                    <span class="hljs-string">"name"</span>: {\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                        <span class="hljs-string">"title"</span>: <span class="hljs-string">"Name"</span>\n                    },\n                    <span class="hljs-string">"credit_card"</span>: {\n                        <span class="hljs-string">"type"</span>: <span class="hljs-string">"number"</span>,\n                        <span class="hljs-string">"title"</span>: <span class="hljs-string">"Credit card"</span>\n                    }\n                },\n                <span class="hljs-string">"required"</span>: [\n                    <span class="hljs-string">"name"</span>\n                ],\n                <span class="hljs-string">"dependencies"</span>: {\n                    <span class="hljs-string">"credit_card"</span>: {\n                        <span class="hljs-string">"properties"</span>: {\n                            <span class="hljs-string">"billing_address"</span>: {\n                                <span class="hljs-string">"type"</span>: <span class="hljs-string">"string"</span>,\n                                <span class="hljs-string">"title"</span>: <span class="hljs-string">"Billing address"</span>\n                            }\n                        },\n                        <span class="hljs-string">"required"</span>: [\n                            <span class="hljs-string">"billing_address"</span>\n                        ]\n                    }\n                }\n            }\n        }\n    },\n    <span class="hljs-string">"model"</span>: {\n        <span class="hljs-string">"simple"</span>: {\n            <span class="hljs-string">"name"</span>: <span class="hljs-string">"Randy"</span>\n        }\n    }\n}'},xsVu:function(s,n){s.exports='\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-bottom: 20px;"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">"let example of examples"</span>\n  (<span class="hljs-attr">click</span>)=<span class="hljs-string">"loadExample(example)"</span>\n  <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span> [<span class="hljs-attr">class.btn-primary</span>]=<span class="hljs-string">"type === example"</span>&gt;</span>\n    {{ example }}\n  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">form</span> [<span class="hljs-attr">formGroup</span>]=<span class="hljs-string">"form"</span> (<span class="hljs-attr">ngSubmit</span>)=<span class="hljs-string">"submit()"</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"fields"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">formly-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span> [<span class="hljs-attr">fields</span>]=<span class="hljs-string">"fields"</span> [<span class="hljs-attr">options</span>]=<span class="hljs-string">"options"</span> [<span class="hljs-attr">form</span>]=<span class="hljs-string">"form"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">formly-form</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary submit-button"</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"!form.valid"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n'},xueC:function(s,n){s.exports="import { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFormOptions, FormlyFieldConfig } from '@ngx-formly/core';\nimport { FormlyJsonschema } from '@ngx-formly/core/json-schema';\nimport { HttpClient } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-app-example',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  form: FormGroup;\n  model: any;\n  options: FormlyFormOptions;\n  fields: FormlyFieldConfig[];\n\n  type: string;\n  examples = [\n    'simple',\n    'nested',\n    'arrays',\n    'numbers',\n    'references',\n    'schema_dependencies',\n  ];\n\n  constructor(\n    private formlyJsonschema: FormlyJsonschema,\n    private http: HttpClient,\n  ) {\n    this.loadExample(this.examples[0]);\n  }\n\n  loadExample(type: string) {\n    this.http.get<any>(`assets/json-schema/${type}.json`).pipe(\n      tap(({ schema, model }) => {\n        this.type = type;\n        this.form = new FormGroup({});\n        this.options = {};\n        this.fields = [this.formlyJsonschema.toFieldConfig(schema)];\n        this.model = model;\n      }),\n    ).subscribe();\n  }\n\n  submit() {\n    alert(JSON.stringify(this.model));\n  }\n}\n"}}]);